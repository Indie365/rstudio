def utils

def buildBinaryJob(String platform) {
  build wait: false,
        job: "IDE/OS-Builds/Platforms/${platform}-pipeline/${env.BUILD_BRANCH}",
        parameters: [
          gitParameter(name: "COMMIT_HASH", value: "${COMMIT_HASH}"),
          string(name: "RSTUDIO_VERSION_PATCH", value: "${RSTUDIO_VERSION_PATCH}"),
          string(name: "SLACK_CHANNEL", value: "${SLACK_CHANNEL}"),
          booleanParam(name: "DAILY", value: true),
          booleanParam(name: "PUBLISH", value: params.PUBLISH)
        ]
}

pipeline {
  agent {
    dockerfile {
      filename 'Dockerfile.dispatcher'
      label 'linux && amd64'
    }
  }

  triggers {
    cron 'H H(20-23) * * *'
  }
  
  parameters {
    string defaultValue: '0', description: 'RStudio Patch Version', name: 'RSTUDIO_VERSION_PATCH', trim: true
    string defaultValue: '#ide-builds', description: 'Slack channel to publish build message.', name: 'SLACK_CHANNEL', trim: true
    booleanParam defaultValue: true, description: 'Publish the build to S3 and sentry.', name: 'PUBLISH'
    booleanParam defaultValue: false, description: 'Force build even if there are no changes.', name: 'FORCE_BUILD'
  }
  
  environment {
    RSTUDIO_VERSION = ""
    RSTUDIO_VERSION_MAJOR = 0
    RSTUDIO_VERSION_MINOR = 0
    RSTUDIO_VERSION_PATCH = 0
    RSTUDIO_VERSION_SUFFIX = 0
    COMMIT_HASH=""
    BUILD_BRANCH="${env.BRANCH_NAME.replace('/', '%2F')}"
  }

  stages {
    stage ("Set Version & Commit") {
      steps {
        script {
          utils = load "${env.WORKSPACE}/utils.groovy"
          
          // Get the current commit
          COMMIT_HASH = sh returnStdout: true, script: 'git rev-parse HEAD'

          // Get the version
          (RSTUDIO_VERSION,
            RSTUDIO_VERSION_MAJOR,
            RSTUDIO_VERSION_MINOR,
            RSTUDIO_VERSION_PATCH,
            RSTUDIO_VERSION_SUFFIX) = utils.getVersion()
        }

        buildName "${RSTUDIO_VERSION}"
      }
    }

    stage ("Setup and Trigger Builds") {
      when {
        anyOf {
          expression { return params.FORCE_BUILD }
          allOf {
            changeset comparator: 'REGEXP', pattern: '(?!docs/).+'
            not {
              changeset 'Jenkinsfile.nightly'
            }
          }
        }
      }

      stages {
        stage ("Create a Sentry Release") {
          environment {
            SENTRY_API_KEY = credentials('ide-sentry-api-key')
          }

          when { expression { return params.PUBLISH } }

          steps { 
            echo "Creating a sentry release for version ${RSTUDIO_VERSION}"

            // Install sentry
            sh "HOME=`pwd` ./dependencies/common/install-sentry-cli"

            // create new release on Sentry
            sh 'sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend new ${RSTUDIO_VERSION}'

            // associate commits
            sh 'sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend set-commits --auto ${RSTUDIO_VERSION}'

            // finalize release
            sh 'sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend finalize ${RSTUDIO_VERSION}'
          }
        }

        stage ("Trigger Builds") {
          parallel {
            stage ("Binary Builds") {
              steps {
                buildBinaryJob 'windows'
                buildBinaryJob 'linux'
                buildBinaryJob 'macos'
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      sendNotifications slack_channel: SLACK_CHANNEL
    }
  }
}
