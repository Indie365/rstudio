def utils

versionFlower = ""

// Map OS to agent labels to avoid needing to write a separate Windows-only stage
labelForOS = [
  'bionic':     'linux',
  'jammy':      'linux',
  'centos7':    'linux',
  'rhel8':      'linux',
  'rhel9':      'linux',
  'opensuse15': 'linux',
  'windows':    'windows'
]

pipeline {
  agent { label "linux && x86_64" }

  options {
    disableConcurrentBuilds()
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '100'))
  }

  parameters {
    string(name: 'COMMIT_HASH', defaultValue: 'none', description: 'The commit hash to build')
    string(name: 'SLACK_CHANNEL', defaultValue: '#ide-builds-dev', description: 'Slack channel to publish build message.')
    string(name: 'OS_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching OS')
    string(name: 'ARCH_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching ARCH')
    booleanParam(name: 'PUBLISH', defaultValue: true, description: 'Runs publish stage if true')
  }

  stages {
    stage ('Checkout') {
      when {
        expression { return "${params.COMMIT_HASH}" != 'none' }
      }

      steps {
         echo "Commit_hash value: ${params.COMMIT_HASH}"
         checkout([$class: 'GitSCM',
                   branches: [[name: "${params.COMMIT_HASH}"]],
                   extensions: [],
                   userRemoteConfigs: [[credentialsId: 'github-rstudio-jenkins', url: "${GIT_URL}"]]])
       }
    }

    stage('Version') {
      steps {
        script {
          sh "echo 'Loading utils from ${env.WORKSPACE}/utils.groovy'"
          utils = load "${env.WORKSPACE}/utils.groovy"

          versionFlower = utils.getFlower()
          currentBuild.displayName = "${versionFlower}"
        }
      }
    }

    stage('Container Matrix') {
      matrix {
        when {
          anyOf {
            equals expected: params.OS_FILTER, actual: env.os;
            equals expected: params.OS_FILTER, actual: 'all'
          }
        }

        axes {
          axis {
            name 'os'
            values 'bionic', 'jammy', 'centos7', 'rhel8', 'rhel9', 'opensuse15', 'windows'
          }
          axis {
            name 'arch'
            values 'x86_64', 'arm64'
          }
        }

        excludes {
          exclude {
            axis {
              name 'os'
              values 'centos7', 'windows'
            }
            axis {
              name 'arch'
              values 'arm64'
            }
          }
        }

        stages {
          stage ("Pull Build Push") {
            agent {
              label "${labelForOS[os]} && ${arch}"
            }

            environment {
              GITHUB_LOGIN = credentials('github-rstudio-jenkins')
            }

            steps {
              echo "Creating image jenkins/ide:${os}-${arch}-${versionFlower}-dev"
              pullBuildPush(
                image_name: 'jenkins/ide',
                image_tag: "${os}-${arch}-${versionFlower}-dev",
                latest_tag: false,
                build_arg_jenkins_uid: 'JENKINS_UID',
                build_arg_jenkins_gid: 'JENKINS_GID',
                dockerfile: "docker/jenkins/Dockerfile.${os}",
                build_args: "--build-arg ARCH=${arch} --build-arg GITHUB_LOGIN=${GITHUB_LOGIN}",
                push: "${params.PUBLISH}"
              )
            }
          }
        }
      }
    }
  }
}
