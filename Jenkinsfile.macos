def utils

pipeline {

  agent { label 'macos-v1.4-arm64' }

  options {
    // timeout regardless of activity
    timeout(activity: false, time: 120)
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '100'))
  }

  parameters {
      string(name: 'SLACK_CHANNEL', defaultValue: '#ide-builds', description: 'Slack channel to publish build message.')
      string(name: 'RSTUDIO_VERSION_PATCH',  defaultValue: '999', description: 'RStudio Patch Version')
      booleanParam(name: 'DAILY', defaultValue: false, description: 'Runs daily build if true')
      booleanParam(name: 'PUBLISH', defaultValue: true, description: 'Runs publish stage if true')
      gitParameter defaultValue: "${env.GIT_BRANCH}",
                  name: 'COMMIT_HASH',
                  type: 'PT_REVISION'
  }

  environment {
    PATH = "$HOME/opt/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    PACKAGE_OS = 'macOS'
    RSTUDIO_VERSION = ""
    RSTUDIO_VERSION_MAJOR = 0
    RSTUDIO_VERSION_MINOR = 0
    RSTUDIO_VERSION_PATCH = 0
    RSTUDIO_VERSION_SUFFIX = 0
    IS_PRO = false
  }
  stages {

    stage('Load Utils') {
      steps {
        script {
          sh 'printenv'
          sh "echo 'Loading utils from ${env.WORKSPACE}/utils.groovy'"
          utils = load "${env.WORKSPACE}/utils.groovy"
        }
      }
    }

    stage ("Checkout") {
      steps {
        echo "Commit_hash value: ${params.COMMIT_HASH}"
        checkout([$class: 'GitSCM',
                  branches: [[name: "${params.COMMIT_HASH}"]],
                  extensions: [],
                  userRemoteConfigs: [[credentialsId: 'github-rstudio-jenkins', url: 'https://github.com/rstudio/rstudio']]])
      }
    }

    stage('Versioning') {
      steps {
        script {
          (RSTUDIO_VERSION,
            RSTUDIO_VERSION_MAJOR,
            RSTUDIO_VERSION_MINOR,
            RSTUDIO_VERSION_PATCH,
            RSTUDIO_VERSION_SUFFIX) = utils.getVersion()
          currentBuild.displayName = "${RSTUDIO_VERSION_MAJOR}.${RSTUDIO_VERSION_MINOR}.${RSTUDIO_VERSION_PATCH}${RSTUDIO_VERSION_SUFFIX}"
          IS_PRO = RSTUDIO_VERSION_SUFFIX.contains('pro')
        }
      }
    }

    stage('Install Dependencies') {
      environment {
        // boost won't compile without the brew version of openssl.
        // only add it to the dep resolve step though, or the ide build will compile against the wrong openssl
        PATH = '/usr/local/opt/openssl/bin:/usr/local/opt/openssl/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
      }
      steps {
        withCredentials([usernameColonPassword(credentialsId: 'github-rstudio-jenkins', variable: "GITHUB_LOGIN")]) {
          sh 'cd dependencies/osx && RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN ./install-dependencies-osx && cd ../..'
        }
      }
    }

    stage("Build Matrix") {

      environment {
        ENV = "RSTUDIO_VERSION_MAJOR=${RSTUDIO_VERSION_MAJOR} RSTUDIO_VERSION_MINOR=${RSTUDIO_VERSION_MINOR} RSTUDIO_VERSION_PATCH=${RSTUDIO_VERSION_PATCH} RSTUDIO_VERSION_SUFFIX=${RSTUDIO_VERSION_SUFFIX}"
      }

      matrix {

        axes {
          axis {
            name 'FLAVOR'
            values 'Electron', 'Desktop' // desktop denotes a Qt build
          }
        }

        when {
          anyOf {
            expression { return FLAVOR == 'Electron' }
            expression { return FLAVOR == 'Desktop' && IS_PRO == true } // Only build Qt on Pro
          }
        }

        stages {
          stage('Sequential Matrix') {
            options {
              lock('synchronous-matrix')
            }
            stages{
              stage('Build') {

                environment {
                  AWS_ACCOUNT_ID = '749683154838'
                  KEYCHAIN_PASSPHRASE = credentials('ide-keychain-passphrase')
                }

                steps {
                  script {
                    // Set sccache enabled
                    if (params.DAILY == false) {
                      ENV = "${ENV} SCCACHE_ENABLED=1"
                    }
                  }
                  // unlock keychain to ensure build gets signed.
                  sh 'security unlock-keychain -p $KEYCHAIN_PASSPHRASE && security set-keychain-settings' // turn off timeout
                  // build rstudio
                  dir ("package/osx") {
                    withAWS(role: 'build', roleAccount: AWS_ACCOUNT_ID) {
                      sh "${ENV} ./make-package --clean --rstudio-target=${FLAVOR}"
                    }
                  }
                }
              }

              stage('Test') {
                environment {
                  PATH = "${env.HOME}/opt/bin:${env.PATH}"
                }
                steps {
                  dir("package/osx/build/src/cpp") {
                    // attempt to run cpp unit tests
                    // problems with rsession finding openssl, so those tests
                    // are disabled until we solve it (#6890)
                    sh "arch -x86_64 ./rstudio-tests"
                    
                    // electron tests not working in CI environment, under investigation
                    // if(FLAVOR == 'Electron') {
                    //   sh "cd ../../../../../src/node/desktop/ && $HOME/.yarn/bin/yarn && $HOME/.yarn/bin/yarn test"
                    // }
                    }
                  }
                  post {
                    failure {
                      // mark build as unstable if it fails unit tests
                      unstable("rstudio-tests failed (${FLAVOR})")
                    }
                  }
                }

              stage('Notarize and Upload') {

                when {
                  expression {
                    return params.PUBLISH
                  }
                }
                environment {
                  PATH = "${env.HOME}/opt/bin:${env.PATH}"
                  PACKAGE_FILE = ""
                  BUILD_TYPE = ""
                  BUILD_DEST = ""
                  PRODUCT = "${FLAVOR.toLowerCase()}"
                  RSTUDIO_RELEASE = "${RSTUDIO_VERSION_MAJOR}.${RSTUDIO_VERSION_MINOR}.${RSTUDIO_VERSION_PATCH}${RSTUDIO_VERSION_SUFFIX}"
                }
                
                stages {
                  stage("Set Release Variables") {
                    steps {
                      script {
                        // extract name of package to publish
                        PACKAGE_FILE = sh (
                          script: "basename `ls package/osx/build/RStudio-*.dmg`",
                          returnStdout: true
                        ).trim()

                        BUILD_TYPE= sh (
                          script: "cat version/BUILDTYPE",
                          returnStdout: true
                        ).trim().toLowerCase()
                        if (IS_PRO) {
                          PRODUCT = PRODUCT + "-pro"
                        }
                        BUILD_DEST =  "s3://rstudio-ide-build/${PRODUCT}/macos/"
                      }
                    }
                  }

                  stage("Notarize") {
                    steps {
                      withCredentials([usernamePassword(credentialsId: 'ide-apple-notarizer', usernameVariable: 'APPLE_ID', passwordVariable: 'APPLE_ID_PASSWORD')]) {
                        sh "docker/jenkins/notarize-release.sh package/osx/build/${PACKAGE_FILE}"
                      }
                    }
                  }

                  stage("Upload") {
                    steps {
                      // this job is going to run on a macOS slave, which cannot use an instance-profile
                      withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws']]) {
                        retry(5) {
                          sh "aws s3 cp package/osx/build/${PACKAGE_FILE} ${BUILD_DEST}"
                        }
                      }
                    }
                  }

                  stage("Upload Daily Build Redirects") {
                    environment {
                      RSTUDIO_ORG_PEM = credentials('www-rstudio-org-pem')
                    }
                    when { // See https://github.com/rstudio/rstudio-pro/commit/0590beeba8ff898b6c9ed8f524ca734bb830f930
                      expression {
                        return IS_PRO != true && FLAVOR == 'Electron';
                      }
                    }
                    steps {
                      // upload daily build redirects
                      withCredentials([file(credentialsId: 'www-rstudio-org-pem', variable: 'wwwRstudioOrgPem')]) {
                        sh 'docker/jenkins/publish-daily-binary.sh https://s3.amazonaws.com/rstudio-ide-build/${PRODUCT}/macos/${PACKAGE_FILE} ${RSTUDIO_ORG_PEM}'
                      }
                    }
                  }
                  
                  stage("Sentry Upload") {
                    environment {
                      SENTRY_API_KEY = credentials('ide-sentry-api-key')
                    }
                    steps {
                      // upload debug symbols to Sentry
                      retry(5) {
                        // timeout sentry in 15 minutes
                        timeout(activity: true, time: 15) {
                          // create new release on Sentry
                          sh 'sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend new ${RSTUDIO_RELEASE}'

                          // upload Javascript source maps
                          sh 'cd package/osx/build/gwt && sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend files ${RSTUDIO_RELEASE} upload-sourcemaps --ext js --ext symbolMap --rewrite .'

                          // associate commits
                          sh 'sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend set-commits --auto ${RSTUDIO_RELEASE}'

                          // finalize release
                          sh 'sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend finalize ${RSTUDIO_RELEASE}'

                          // upload C++ debug information
                          sh 'cd package/osx/build/src/cpp && sentry-cli --auth-token ${SENTRY_API_KEY} upload-dif --org rstudio --project ide-backend -t dsym .'
                        }
                      }
                    }
                  }
                  
                  stage("Publish") {
                    steps{
                      // publish build to dailies page
                      withCredentials([usernamePassword(credentialsId: 'github-rstudio-jenkins', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PAT')]) {
                        // publish the build
                        sh "docker/jenkins/publish-build.sh --build ${PRODUCT}/macos --url https://s3.amazonaws.com/rstudio-ide-build/${PRODUCT}/macos/${PACKAGE_FILE} --pat ${GITHUB_PAT} --file package/osx/build/${PACKAGE_FILE} --version ${RSTUDIO_RELEASE}"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  post {
    always {
      deleteDir()
      sendNotifications slack_channel: SLACK_CHANNEL
    }
  }

}
