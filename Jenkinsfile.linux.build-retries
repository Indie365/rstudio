flavor = 'server'
os = 'jammy'
arch = 'amd64'
type = 'DEB'

pipeline {
  agent {
    label 'linux && amd64'
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '100'))
  }

  /* parameters {
    string(name: 'RSTUDIO_VERSION_PATCH', defaultValue: '0', description: 'RStudio Patch Version')
    string(name: 'SLACK_CHANNEL', defaultValue: '#ide-builds', description: 'Slack channel to publish build message.')
    string(name: 'OS_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching OS')
    string(name: 'ARCH_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching ARCH')
    string(name: 'FLAVOR_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching FLAVOR')
  } */

  environment {
    GITHUB_LOGIN = credentials('github-rstudio-jenkins')
  }

  stages {

    stage('Prepare Container') {
      steps {
        echo 'Preparing Container...'
        echo "image tag: ${os}-${arch}-${env.BRANCH_NAME.replaceAll('/', '-')}"
        /* pullBuildPush(
          image_name: 'jenkins/ide',
          image_tag: "${os}-${arch}-${env.BRANCH_NAME.replaceAll('/', '-')}",
          latest_tag: false,
          dockerfile: "docker/jenkins/Dockerfile.${os}",
          build_arg_jenkins_uid: 'JENKINS_UID',
          build_arg_jenkins_gid: 'JENKINS_GID',
          builds_args: "--build-arg GITHUB_LOGIN=${GITHUB_LOGIN}",
          push: env.BRANCH_IS_PRIMARY
        ) */
      }
    }

    stage('Build and Upload') {
      /* agent {
        docker {
          image "jenkins/ide:${os}-${arch}-${env.BRANCH_NAME.replaceAll('/', '-')}"
          reuseNode true
        }
      } */
      stages {
        stage('Compile Package') {
          steps {
            echo 'Compiling Package...'
            echo "Will run sh './make-${flavor}-package ${type} clean'"
            /* dir('package/linux') {
              sh "./make-${flavor}-package ${type} clean"
            } */
          }
        }

        /* stage('Sentry Upload') {
          environment {
            SENTRY_API_KEY = credentials('ide-sentry-api-key')
            sentryUploadRetryLimit=5
          }
          steps {
            dir("package/linux/build-${flavor.capitalize()}-${type}/src/cpp") {
                sh "../../../../../docker/jenkins/sentry-upload.sh ${SENTRY_API_KEY} ${sentryUploadRetryLimit}"
            }
          }
        } */

        stage('Sentry Upload') {
          environment {
            AWS_PATH="s3://rstudio-sentry-upload/${flavor}/${os}/${arch}/"
          }
          //TODO: upload to s3, and then 
          steps {
            echo "Uploading debug artifacts to ${AWS_PATH}"
            sh "touch test-file.txt"
            sh "aws s3 cp ./test-file.txt ${AWS_PATH}"
          }
        }
      }
    }
  }
}
