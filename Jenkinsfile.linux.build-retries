pipeline {
  agent {
    label 'linux && amd64'
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '100'))
  }

  /* parameters {
    string(name: 'RSTUDIO_VERSION_PATCH', defaultValue: '0', description: 'RStudio Patch Version')
    string(name: 'SLACK_CHANNEL', defaultValue: '#ide-builds', description: 'Slack channel to publish build message.')
    string(name: 'OS_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching OS')
    string(name: 'ARCH_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching ARCH')
    string(name: 'FLAVOR_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching FLAVOR')
  } */

  environment {
    GITHUB_LOGIN = credentials('github-rstudio-jenkins')
    OS = 'jammy'
    ARCH = 'amd64'
    FLAVOR = 'server'
    TYPE = 'DEB'
    AWS_ACCOUNT_ID = '749683154838'
  }

  stages {
    stage('Prepare Container') {
      steps {
        withAWS(role: 'build', roleAccount: AWS_ACCOUNT_ID) {
          pullBuildPush(
            image_name: 'jenkins/ide',
            image_tag: "${OS}-${ARCH}-${env.BRANCH_NAME.replaceAll('/', '-')}",
            latest_tag: false,
            dockerfile: "docker/jenkins/Dockerfile.${OS}",
            build_arg_jenkins_uid: 'JENKINS_UID',
            build_arg_jenkins_gid: 'JENKINS_GID',
            builds_args: "--build-arg GITHUB_LOGIN=${GITHUB_LOGIN}",
            push: false
          )
        }
      }
    }
    stage('Build and Upload') {
      agent {
        docker {
          image "jenkins/ide:${OS}-${ARCH}-${env.BRANCH_NAME.replaceAll('/', '-')}"
          reuseNode true
        }
      }
      stages {
        stage('Compile Package') {
          steps {
            dir('package/linux') {
              withAWS(role: 'build', roleAccount: AWS_ACCOUNT_ID) {
                // perform the compilation
                sh "SCCACHE_ENABLED=1 PACKAGE_OS=${OS} ./make-${FLAVOR}-package ${type} clean"
              }
            }
          }
        }
        stage('Upload Build Archive') {
          environment {
            AWS_PATH="s3://rstudio-sentry-upload/${FLAVOR}/${OS}/${ARCH}/"
          }
          steps {
            echo "Creating build archive"
            dir("package/linux/build-${FLAVOR.capitalize()}-${TYPE}") {
              sh "zip -r build.zip ./*"
            }
            echo "Uploading build archive to ${AWS_PATH}"
            withAWS(role: 'build', roleAccount: AWS_ACCOUNT_ID) {
              sh "aws s3 cp package/linux/build-${FLAVOR.capitalize()}-${TYPE}/build.zip ${AWS_PATH}"
            }
          }
        }
      }
    }
    /* stage('Sentry Upload') {
      environment {
        SENTRY_API_KEY = credentials('ide-sentry-api-key')
        sentryUploadRetryLimit=5
      }
      steps {
        dir("package/linux/build-${flavor.capitalize()}-${type}/src/cpp") {
          sh "../../../../../docker/jenkins/sentry-upload.sh ${SENTRY_API_KEY} ${sentryUploadRetryLimit}"
        }
      }
    } */
  }
}
