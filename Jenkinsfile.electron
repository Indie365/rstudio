pipeline {

  agent { label 'macos-v1.4-arm64' }

  options {
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '100'))
  }

  parameters {
      string(name: 'RSTUDIO_VERSION_MAJOR',  defaultValue: '2022', description: 'RStudio Major Version')
      string(name: 'RSTUDIO_VERSION_MINOR',  defaultValue: '01', description: 'RStudio Minor Version')
      string(name: 'RSTUDIO_VERSION_PATCH',  defaultValue: '0', description: 'RStudio Patch Version')
      string(name: 'RSTUDIO_VERSION_SUFFIX', defaultValue: '+daily-9999', description: 'RStudio Pro Suffix Version')
      string(name: 'GIT_REVISION', defaultValue: 'main', description: 'Git revision to build')
      string(name: 'BRANCH_NAME', defaultValue: 'origin/main', description: 'Branch name to build')
      string(name: 'SLACK_CHANNEL', defaultValue: '#ide-builds', description: 'Slack channel to publish build message.')
  }

  environment {
    PATH = "$HOME/opt/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
    PACKAGE_OS = 'macOS'
  }

  stages {

    stage('dependencies') {

      environment {
        // boost won't compile without the brew version of openssl.
        // only add it to the dep resolve step though, or the ide build will compile against the wrong openssl
        PATH = '/usr/local/opt/openssl/bin:/usr/local/opt/openssl/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
      }

      steps {
        withCredentials([usernameColonPassword(credentialsId: 'github-rstudio-jenkins', variable: "GITHUB_LOGIN")]) {
          sh 'cd dependencies/osx && RSTUDIO_GITHUB_LOGIN=$GITHUB_LOGIN ./install-dependencies-osx && cd ../..'
        }
      }

    }

    stage('build') {

      steps {
        script {

          // unlock keychain to ensure build gets signed.
          withCredentials([string(credentialsId: 'ide-keychain-passphrase', variable: 'KEYCHAIN_PASSPHRASE')]){
            sh 'security unlock-keychain -p $KEYCHAIN_PASSPHRASE && security set-keychain-settings' // turn off timeout
          }

          // set requisite environment variables
          def env = "RSTUDIO_VERSION_MAJOR=${params.RSTUDIO_VERSION_MAJOR} RSTUDIO_VERSION_MINOR=${params.RSTUDIO_VERSION_MINOR} RSTUDIO_VERSION_PATCH=${params.RSTUDIO_VERSION_PATCH} RSTUDIO_VERSION_SUFFIX=${params.RSTUDIO_VERSION_SUFFIX}"

          // build rstudio
          withCredentials([usernamePassword(credentialsId: 'ide-apple-notarizer', usernameVariable: 'APPLE_ID', passwordVariable: 'APPLE_ID_PASSWORD')]) {
            sh 'cd package/osx && ${env} ./make-package clean --rstudio-target=Electron && cd ../..'
          }
        }
      }

    }

    stage('tests') {

      environment {
        PATH = "${env.HOME}/opt/bin:${env.PATH}"
      }

      steps {
        script {
          try {
            // attempt to run cpp unit tests
            // problems with rsession finding openssl, so those tests
            // are disabled until we solve it (#6890)
            sh "cd package/osx/build/src/cpp && ./rstudio-tests"
          } catch(err) {
             currentBuild.result = "UNSTABLE"
          }
        }
      }

    }

    stage('notarize and upload') {

      environment {
        PATH = "${env.HOME}/opt/bin:${env.PATH}"
      }
      
      steps {
        script {

          // extract name of package to publish
          def packageFile = sh (
            script: "basename `ls src/node/desktop/out/make/RStudio-electron-*.dmg`",
            returnStdout: true
          ).trim()

          def buildType = sh (
            script: "cat version/BUILDTYPE",
            returnStdout: true
          ).trim().toLowerCase()

          def buildDest =  "s3://rstudio-ide-build/electron/macos/"

          // this job is going to run on a macOS slave, which cannot use an instance-profile
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws']]) {
            retry(5) {
              sh "aws s3 cp src/node/desktop/out/make/${packageFile} ${buildDest}"
            }
          }

          // Removed temporarily until Electron is the main version
          // upload daily build redirects
          // withCredentials([file(credentialsId: 'www-rstudio-org-pem', variable: 'wwwRstudioOrgPem')]) {
          //   sh "docker/jenkins/publish-daily-binary.sh https://s3.amazonaws.com/rstudio-ide-build/electron/macos/${packageFile} ${wwwRstudioOrgPem}"
          // }

          // Removed temporarily until Electron is the main version
          // upload debug symbols to Sentry
          // withCredentials([string(credentialsId: 'ide-sentry-api-key', variable: 'SENTRY_API_KEY')]){
          //   // construct release version
          //   def RSTUDIO_RELEASE = "${params.RSTUDIO_VERSION_MAJOR}.${params.RSTUDIO_VERSION_MINOR}.${params.RSTUDIO_VERSION_PATCH}${params.RSTUDIO_VERSION_SUFFIX}"
 
          //   // create new release on Sentry
          //   sh "sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend new ${RSTUDIO_RELEASE}"

          //   // upload Javascript source maps
          //   sh "cd package/osx/build/gwt && sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend files ${RSTUDIO_RELEASE} upload-sourcemaps --ext js --ext symbolMap --rewrite ."

          //   // associate commits
          //   sh "sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend set-commits --auto ${RSTUDIO_RELEASE}"

          //   // finalize release
          //   sh "sentry-cli --auth-token ${SENTRY_API_KEY} releases --org rstudio --project ide-backend finalize ${RSTUDIO_RELEASE}"

          //   // upload C++ debug information
          //   sh "cd package/osx/build/src/cpp && sentry-cli --auth-token ${SENTRY_API_KEY} upload-dif --org rstudio --project ide-backend -t dsym ."
          // }

          // publish build to dailies page
          withCredentials([usernamePassword(credentialsId: 'github-rstudio-jenkins', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_PAT')]) {

            // derive product
            def product="electron"
            if (params.RSTUDIO_VERSION_SUFFIX.contains("pro")) {
              product = "electron-pro"
            }

            // publish the build
            sh "docker/jenkins/publish-build.sh --build ${product}/macos --url https://s3.amazonaws.com/rstudio-ide-build/electron/macos/${packageFile} --pat ${GITHUB_PAT} --file src/node/desktop/out/make/${packageFile} --version ${params.RSTUDIO_VERSION_MAJOR}.${params.RSTUDIO_VERSION_MINOR}.${params.RSTUDIO_VERSION_PATCH}${params.RSTUDIO_VERSION_SUFFIX}"
          }

        }
      }

    }

  }

  post {
    always {
      deleteDir()
      sendNotifications slack_channel: SLACK_CHANNEL
    }
  }
}
