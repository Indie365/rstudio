def utils
def versionFlower = ""

pipeline {
  agent { none }

  options {
    disableConcurrentBuilds()
    buildDiscarder(
      logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '100'))
  }

  parameters {
    string(name: 'RSTUDIO_VERSION_PATCH', defaultValue: '0', description: 'RStudio Patch Version')
    string(name: 'SLACK_CHANNEL', defaultValue: '#ide-builds-dev', description: 'Slack channel to publish build message.')
    string(name: 'OS_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching OS')
    string(name: 'ARCH_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching ARCH')
    string(name: 'FLAVOR_FILTER', defaultValue: 'all', description: 'Pattern to limit builds by matching FLAVOR')
    booleanParam(name: 'DAILY', defaultValue: true, description: 'Runs daily build if true')
    booleanParam(name: 'PUBLISH', defaultValue: false, description: 'Runs publish stage if true')
    string(name: 'COMMIT_HASH' , defaultValue: "${env.GIT_BRANCH}")
  }

  environment {
    RSTUDIO_VERSION = ""
    RSTUDIO_VERSION_MAJOR = ""
    RSTUDIO_VERSION_MINOR = ""
    RSTUDIO_VERSION_PATCH = ""
    RSTUDIO_VERSION_SUFFIX = ""
    IS_PRO = false
  }

  stages {
    stage('Initialize') {
      agent { label 'linux' }

      steps {
        sh "echo 'Loading utils from ${env.WORKSPACE}/utils.groovy'"

        script {
          utils = load "${env.WORKSPACE}/utils.groovy"

          (RSTUDIO_VERSION,
            RSTUDIO_VERSION_MAJOR,
            RSTUDIO_VERSION_MINOR,
            RSTUDIO_VERSION_PATCH,
            RSTUDIO_VERSION_SUFFIX) = utils.getVersion()
          RSTUDIO_VERSION = "${RSTUDIO_VERSION_MAJOR}.${RSTUDIO_VERSION_MINOR}.${RSTUDIO_VERSION_PATCH}${RSTUDIO_VERSION_SUFFIX}"
          currentBuild.displayName = "${RSTUDIO_VERSION}"
          IS_PRO = RSTUDIO_VERSION_SUFFIX.contains('pro')
          versionFlower = readFile(file: 'version/RELEASE').replaceAll(" ", "-").toLowerCase().trim()

          COMMIT_HASH = sh returnStdout: true, script: 'git rev-parse HEAD'
        }
        echo "Version is ${RSTUDIO_VERSION}"

        echo "Commit_hash value: ${COMMIT_HASH}"
        checkout([$class: 'GitSCM',
                  branches: [[name: "${COMMIT_HASH}"]],
                  extensions: [],
                  userRemoteConfigs: [[credentialsId: 'github-rstudio-jenkins', url: GIT_URL]]])
      }
    }

    stage('Build Matrix') {
      matrix {
        when {
          anyOf {
            equals expected: params.OS_FILTER, actual: env.os;
            equals expected: params.OS_FILTER, actual: 'all'
          }
        }

        axes {
          axis {
            name 'os'
            values 'bionic', 'jammy', 'centos7', 'rhel8', 'rhel9', 'opensuse15'
          }
          axis {
            name 'arch'
            values 'x86_64', 'arm64'
          }
          axis {
              name 'flavor'
              values 'desktop', 'server', 'electron'
          }
        }

        excludes {
          exclude {
            axis {
              name 'os'
              values 'centos7'
            }
            axis {
              name 'arch'
              values 'arm64'
            }
          }
        }

        stages {
          stage ("Pull Docker Image for Build"){
            agent {
              label 'linux && ${arch}'
              docker {
                image "jenkins/ide:${os}-${arch}-${versionFlower}-linux-dev"
                registryCredentialsId 'ecr:us-east-1:aws-build-role'
                registryUrl 'https://263245908434.dkr.ecr.us-east-1.amazonaws.com'
                reuseNode true
              }
            }

            environment {
              CODESIGN_KEY = credentials('gpg-codesign-private-key')
              CODESIGN_PASS = credentials('gpg-codesign-passphrase')
              SENTRY_API_KEY = credentials('ide-sentry-api-key')
              GITHUB_LOGIN = credentials('github-rstudio-jenkins')
              AWS_BUCKET="rstudio-ide-build"
              AWS_PATH="${flavor}/${os}/\$OS_X86_64_LABEL/"
              PRODUCT="${flavor}"
            }

            stages {
              stage('Compile and Sign Package') {
                steps {
                  dir('package/linux') {
                    sh "./make-${flavor}-package \$PACKAGE_TYPE clean"
                    sh "../../docker/jenkins/sign-release.sh /build-${flavor.capitalize()}-\$PACKAGE_TYPE/rstudio-*.\$PACKAGE_EXT ${CODESIGN_KEY} ${CODESIGN_PASS}"
                  }
                }
              }

              stage('Run Tests') {
                stages {
                  stage ('Electron-Only Tests') {
                    when {
                      expression { return "${flavor}" == "electron" }
                    }

                    steps {
                      dir( "src/node/desktop" ) {
                        sh './scripts/docker-run-unit-tests.sh'
                      }
                    }

                    post {
                      failure {
                        unstable("Electron unit tests failed (on ${os})")
                      }
                    }
                  }

                  stage ('GWT and C++ Tests') {
                    steps {
                      dir ( "package/linux/build-${flavor.capitalize()}-\$PACKAGE_TYPE/src/gwt" ) {
                        sh './gwt-unit-tests.sh'
                      }

                      dir ( "package/linux/build-${flavor.capitalize()}-\$PACKAGE_TYPE/src/cpp" ) {
                        sh './rstudio-tests'
                      }
                    }

                    post {
                      failure {
                        unstable("Unit tests failed (${flavor.capitalize()} on ${os})")
                      }
                    }
                  }
                }
              }

              stage('Check if Upload was Requested') {
                when {
                  expression { return params.PUBLISH }
                }

                stages {
                  stage('Upload Artifacts') {
                    steps {
                      // Upload Sentry
                      dir("package/linux/build-${flavor.capitalize()}-${os}/src/cpp") {
                        retry 5 {
                          timeout activity: true, time: 15 {
                            sh "../../../../../docker/jenkins/sentry-upload.sh ${SENTRY_API_KEY}"
                          }
                        }
                      }

                      // Upload to AWS
                      script {
                        if (rstudioVersionSuffix.contains("pro")) {
                          if (env.PRODUCT == "desktop") {
                            env.PRODUCT = "desktop-pro"
                          } else if (env.PRODUCT == "electron") {
                            env.PRODUCT = "electron-pro"
                          } else if (env.PRODUCT == "server") {
                            env.PRODUCT = "workbench"
                          }
                        }

                        def packageDir = "package/linux/build-${flavor.capitalize()}-\$PACKAGE_TYPE/"
                        def tarballDir = "_CPack_Packages/Linux/\$PACKAGE_TYPE"
                        def packageFile = ''
                        def tarballFile = ''
                        dir(packageDir) {
                          // Upload the pacakge to S3
                          env.packageFile = findFiles glob: "rstudio-*.\$PACKAGE_EXT"
                          // Strip relwithdebinfo froem the filename
                          def renamedFile = echo $packageFile | sed 's/-relwithdebinfo//'
                          mv $packageFile $renamedFile
                          packageFile=$renamedFile

                          withAWS(credentials: 'ide-build') {
                            s3Upload acl: 'BucketOwnerFullControl', bucket: "$AWS_BUCKET", file: "$packageFile", path: "$AWS_PATH"
                          }

                          // Also upload installer-less version for desktop builds
                          if ((flavor == "desktop") || (flavor == "electron")) {
                            dir(tarballDir) {
                              tarballFile = findFiles glob: '*.tar.gz'
                              // Strip relwithdebinfo from the filename
                              def renamedTarball = echo $tarballFile | sed 's/-relwithdebinfo//'
                              mv $tarballFile $renamedTarball
                              tarballFile=$renamedTarball

                              withAWS(credentials: 'ide-build') {
                                s3Upload acl: 'BucketOwnerFullControl', bucket: "$AWS_BUCKET", file: "$tarballFile", path: "$AWS_PATH"
                              }
                            }
                          }
                        }
                      }
                      
                      // Upload to Dailies
                      script {
                        dir('docker/jenkins') {
                          sh "./publish-build.sh --build ${PRODUCT}/${os} --url https://s3.amazonaws.com/rstudio-ide-build/${flavor}/${os}/\$OS_X86_64_LABEL/${packageFile} --pat ${GITHUB_LOGIN_PSW} --file ${packageDir}/${packageFile} --version ${RSTUDIO_VERSION} --arch ${arch}"
                        
                          if (current_container.flavor == "desktop" || current_container.flavor == "electron") {
                            sh "./publish-build.sh --build ${PRODUCT}/${os} --url https://s3.amazonaws.com/rstudio-ide-build/${flavor}/${os}/\$OS_X86_64_LABEL/${tarballFile} --pat ${GITHUB_LOGIN_PSW} --file ${packageDir}/${tarballDir}/${tarballFile} --version ${RSTUDIO_VERSION} --arch ${arch}"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
